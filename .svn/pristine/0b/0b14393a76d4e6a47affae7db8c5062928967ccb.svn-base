<?php
/** 游戏测试类 */
class Gametest
{
	private $xml; //xml对象
	private $path;
	private $fileName = 'gametest.config.xml';

	/** 构造函数 */
    public function __construct($path)
    {
		$this->path = $path;
		$this->xml = simplexml_load_file($this->path['PUB_XML'].$this->fileName);
    }
	
	/**
	 * 增加配置并获取配置总数
	 * @access public
	 * @param  string  $type 类型，有client何server两种
	 * @param  array  $fieldArr 字段数组
	 * @return array  $info result健值表示操作结果，totalNum是对应配置类型的总数
	 */
	public function add($type,$fieldArr)
	{
		$info = array();
		$info['result'] = $this->addConfig($type,$fieldArr);
		$info['totalNum'] = $this->getTotalNum($type);
		return $info;
	}	
	
	/**
	 * 增加配置
	 * @access public
	 * @param  string  $type 类型，有client何server两种
	 * @param  array  $fieldArr 字段数组
	 * @return   $info result健值表示操作结果
	 */
	public function addConfig($type,$fieldArr){
		$xml = $this->xml->addChild($type);
		//$xml->addAttribute("type", "small");
		$xml->addChild("name", $fieldArr['name']);
		switch ($type){
			case 'client' :
				$xml->addChild("url", $fieldArr['url']);
				$xml->addChild("debug",$fieldArr['debug']);
				break;
			case 'server' : 
				$xml->addChild("host", $fieldArr['host']);
				$xml->addChild("port",$fieldArr['port']);
				break ;
			default :
				return false ;
		}
		$this->setOptime();
		$this->xml->asXML($this->path['PUB_XML'].$this->fileName);	
		return true;
	}
	
	/**
	 * 修改配置
	 * @access public
	 * @param  string  $type 类型，有client何server两种
	 * @param  array  $fieldArr 字段数组
	 * @return boolean true表示修改成功，false表示修改失败
	 */
	public function modify($type,$fieldArr)
	{
		$singleConfig = $this->getSingleConfig($type,$fieldArr['name']);
		if(!$singleConfig){
			return false;
		}
		$singleConfig->name = $fieldArr['rename'];
		switch ($type){
			case 'client' :
				$singleConfig->url = $fieldArr['url'];
				$singleConfig->debug = $fieldArr['debug'];
				break;
			case 'server' :
				$singleConfig->host = $fieldArr['host'];
				$singleConfig->port = $fieldArr['port'];
				break;
			default :
				return false;
		}
		$this->setOptime();
		$this->xml->asXML($this->path['PUB_XML'].$this->fileName);
		return true;
	}
	
	/**
	 * 获取所有client或server列表
	 * @access public
	 * @param  string  $type 类型，有client何server两种
	 * @return  array  $configList 配置数组
	 */
	public function allList($type)
	{
		$configList = array();
		foreach ($this->getConfig($type) as $configItem){
			$configList[] = $this->singleInfo($type,$configItem);
		}
		return $configList;
	}
	
	/**
	 * 获取配置信息，用于修改操作
	 * @access public
	 * @param  string  $type 类型，有client何server两种
	 * @param  string  $name 姓名
	 * @return array  $info exist健值表示是否存在
	 */
	public function configInfo($type,$name)
	{
		$info['exist'] = false;
		$singleConfig = $this->getSingleConfig($type,$name);
		if(!$singleConfig){
			return false;	
		}
		$info['exist'] = true;
		$info['data'] = $this->singleInfo($type,$singleConfig);
		return $info;
	}
	
	/**
	 * 查找配置
	 * @access public
	 * @param  string  $type 类型，有client何server两种
	 * @param  string  $keyword  关键字
	 * @return array   $info  返回配置数组
	 */
	public function search($type,$keyword)
	{
		$configList = array();
		foreach ($this->getConfig($type) as $configItem){
			$pos = stripos((string)$configItem->name,$keyword);
			if($pos!==false)
			{
				$configList[] = $this->singleInfo($type,$configItem);
			}
		}
		return $configList;
	}
	
	/**
	 * 删除选中的配置并获取配置总数
	 * @access public
	 * @param  string  $type 类型，有client何server两种
	 * @param  array  $nameArr 姓名数组
	 * @return  array  $info 删除结果数组，totalNum健值表示对应类型总数，success健数组表示删除成功的姓名
	 */
	public function delete($type,$nameArr){
		$info = $this->deleteConfig($type,$nameArr);
		$info['totalNum'] = $this->getTotalNum($type);
		return $info;
	}
	
	/**
	 * 删除选中的配置
	 * @access public
	 * @param  string  $type 类型，有client何server两种
	 * @param  array  $nameArr 姓名数组
	 * @return  array  $info 删除结果数组
	 */
	public function deleteConfig($type,$nameArr){
		$resultArr = array();
		$i=0;
		foreach ($this->getConfig($type) as $configItem){
			foreach ($nameArr as $name){
				if((string)$configItem->name===$name)
				{
					switch ($type){
						case 'client' :
							unset($this->xml->client[$i]);
							break;
						case 'server' :
							unset($this->xml->server[$i]);
							break;
						default :
							return false;
					}
					$resultArr['success'][] = $name;
					$i--;
					unset($array['nameArr'][$name]);
					break;
				}
			}
			$i++;
		}
		$this->setOptime();
		$this->xml->asXML($this->path['PUB_XML'].$this->fileName);
		return $resultArr;
	}
	
	/**
	 * 验证姓名
	 * @access public
	 * @param  string  $type 类型，有client何server两种
	 * @param  string  $value 姓名
	 * @return  int  1表示可以使用,2表示已存在
	 */
	public function checkName($value)
	{
		$checkResultCode=CAN_USE;
		foreach ($this->xml as $configItem){
			if((string)$configItem->name === $value)
			{
				$checkResultCode = HAD_EXIST;
				break;
			}
		}
		return $checkResultCode;
	}
	
	/**
	 * 验证字段格式
	 * @access public
	 * @param  string  $field 字段名
	 * @param  string  $value 值
	 * @return  int  1表示可以使用,3表示格式不符
	 */
	public function checkFormat($field,$value){
		$checkResultCode = FORMAT_ERROR;
		switch ($field){
			case 'url' :
				$result = isUrl($value);
				break;
			case 'host' :
				$result = isHost($value);
				break;
			case 'port' :
				$result = isPort($value);
				break;
			default :
				return false;
		}
		if ($result)
		{
			$checkResultCode = CAN_USE;
		}
		return $checkResultCode;
	}
	
	/** 获取配置数组
	 *  @param string $statement 类型
	 *  @return 数组
	 */
	public function getConfig($statement)
	{
		return $this->xml->xpath($statement);
	}
		
	/** 获取配置总数
	 *  @param string $type 类型
	 *  @return int 总数
	 */
	public function getTotalNum($type)
	{
		return count((array)$this->getConfig($type));
	}
	
	/** 获取单个配置配置
	 *  @param string $type 类型
	 *  @param string $name 姓名
	 *  @return 配置或false
	 */
	private function getSingleConfig($type,$name){
		foreach ($this->getConfig($type) as $configItem){
			if((string)$configItem->name === $name)
			{
				return $configItem;
			}
		}
		return false;
	}
	
	/** 获取单个配置配置
	 *  @param string $type 类型
	 *  @param string $name 姓名
	 *  @return 配置或false
	 */
	private function setOptime(){
		$this->xml->op_time = date('Y-m-d H:i:s' ,time());
	}
	
	/** 获取单个配置信息数组
	 *  @param string $type 类型
	 *  @param object $singleConfig 配置
	 *  @return 配置数组
	 */
	private function singleInfo($type,$singleConfig){
		$info['name'] = (string)$singleConfig->name;
		//$info = $singleConfig->xpath('parent::*');
		//print_r($singleConfig->url->xpath('parent::*'));
		switch ($type){
			case 'client' :
				$info['url'] = (string)$singleConfig->url;
				$info['debug']= (string)$singleConfig->debug;
				break;
			case 'server' :
				$info['host'] = (string)$singleConfig->host;
				$info['port'] = (string)$singleConfig->port;
				break;
			default :
				return false;
		}	
		return $info;
	}
	
	/** 删除全部 ，该函数暂时不用 */
	private function delete__($array)
	{
		$info;
		$i=0;
		switch ($type){
			case 'client' :
				$client = $this->getConfig($type);
				foreach ($client as $item){
					if(!empty($array['keyword'])){
						$pos = stripos((string)$item->name,$array['keyword']);
						if($pos===0 || $pos>0)
						{
							$info['1'][] = (string)$item->name;
							unset($this->xml->client[$i]);
							$i--;
						}
					}else{
						$info['1'][] = (string)$item->name;
						unset($this->xml->client[$i]);
						$i--;
					}
					$i++;
				}
				break;
			case 'server' :
				$server = $this->getConfig($type);
				foreach ($server as $item){
					if(!empty($array['keyword'])){
						$pos = stripos((string)$item->name,$array['keyword']);
						if($pos===0 || $pos>0)
						{
							$info['1'][] = (string)$item->name;
							unset($this->xml->server[$i]);
							$i--;
						}
					}else{
						$info['1'][] = (string)$item->name;
						unset($this->xml->server[$i]);
						$i--;
					}
					$i++;
				}
				break;
		}
		$this->xml->asXML($this->path['PUB_XML'].$this->fileName);
		switch($type){
			case 'client' :
				$info['clientNum'] = $this->getTotalNum($type);
				break;
			case 'server' :
				$info['serverNum'] = $this->getTotalNum($type);
		}
		
		return $info;
	}
}
?>